/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FixedSupplyToken,
  FixedSupplyTokenInterface,
} from "../FixedSupplyToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "remaining",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600860ff16600a62000017919062000143565b6301406f4062000028919062000280565b6000553480156200003857600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005460026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000327565b6000808291508390505b60018511156200013a57808604811115620001125762000111620002eb565b5b6001851615620001225780820291505b808102905062000132856200031a565b9450620000f2565b94509492505050565b60006200015082620002e1565b91506200015d83620002e1565b92506200018c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000194565b905092915050565b600082620001a6576001905062000279565b81620001b6576000905062000279565b8160018114620001cf5760028114620001da5762000210565b600191505062000279565b60ff841115620001ef57620001ee620002eb565b5b8360020a915084821115620002095762000208620002eb565b5b5062000279565b5060208310610133831016604e8410600b84101617156200024a5782820a905083811115620002445762000243620002eb565b5b62000279565b620002598484846001620000e8565b92509050818404811115620002735762000272620002eb565b5b81810290505b9392505050565b60006200028d82620002e1565b91506200029a83620002e1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620002d657620002d5620002eb565b5b828202905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b610dcf80620003376000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806370a082311161006657806370a082311461015d5780638da5cb5b1461018d57806395d89b41146101ab578063a9059cbb146101c9578063dd62ed3e146101f95761009e565b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100f157806323b872dd1461010f578063313ce5671461013f575b600080fd5b6100ab610229565b6040516100b89190610ba0565b60405180910390f35b6100db60048036038101906100d69190610ab5565b610262565b6040516100e89190610b85565b60405180910390f35b6100f9610354565b6040516101069190610bc2565b60405180910390f35b61012960048036038101906101249190610a62565b61035d565b6040516101369190610b85565b60405180910390f35b610147610688565b6040516101549190610bdd565b60405180910390f35b610177600480360381019061017291906109f5565b61068d565b6040516101849190610bc2565b60405180910390f35b6101956106d6565b6040516101a29190610b6a565b60405180910390f35b6101b36106fc565b6040516101c09190610ba0565b60405180910390f35b6101e360048036038101906101de9190610ab5565b610735565b6040516101f09190610b85565b60405180910390f35b610213600480360381019061020e9190610a22565b610944565b6040516102209190610bc2565b60405180910390f35b6040518060400160405280601a81526020017f4578616d706c6520466978656420537570706c7920546f6b656e00000000000081525081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103429190610bc2565b60405180910390a36001905092915050565b60008054905090565b600081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561042a575081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156104365750600082115b80156104ca5750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104c89190610c14565b115b1561067c5781600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461051e9190610c6a565b9250508190555081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105b19190610c6a565b9250508190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106079190610c14565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161066b9190610bc2565b60405180910390a360019050610681565b600090505b9392505050565b600881565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600581526020017f464958454400000000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156107865750600082115b801561081a5750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108189190610c14565b115b156109395781600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461086e9190610c6a565b9250508190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108c49190610c14565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516109289190610bc2565b60405180910390a36001905061093e565b600090505b92915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000813590506109da81610d6b565b92915050565b6000813590506109ef81610d82565b92915050565b600060208284031215610a0b57610a0a610d55565b5b6000610a19848285016109cb565b91505092915050565b60008060408385031215610a3957610a38610d55565b5b6000610a47858286016109cb565b9250506020610a58858286016109cb565b9150509250929050565b600080600060608486031215610a7b57610a7a610d55565b5b6000610a89868287016109cb565b9350506020610a9a868287016109cb565b9250506040610aab868287016109e0565b9150509250925092565b60008060408385031215610acc57610acb610d55565b5b6000610ada858286016109cb565b9250506020610aeb858286016109e0565b9150509250929050565b610afe81610c9e565b82525050565b610b0d81610cb0565b82525050565b6000610b1e82610bf8565b610b288185610c03565b9350610b38818560208601610cf3565b610b4181610d5a565b840191505092915050565b610b5581610cdc565b82525050565b610b6481610ce6565b82525050565b6000602082019050610b7f6000830184610af5565b92915050565b6000602082019050610b9a6000830184610b04565b92915050565b60006020820190508181036000830152610bba8184610b13565b905092915050565b6000602082019050610bd76000830184610b4c565b92915050565b6000602082019050610bf26000830184610b5b565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610c1f82610cdc565b9150610c2a83610cdc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c5f57610c5e610d26565b5b828201905092915050565b6000610c7582610cdc565b9150610c8083610cdc565b925082821015610c9357610c92610d26565b5b828203905092915050565b6000610ca982610cbc565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610d11578082015181840152602081019050610cf6565b83811115610d20576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b6000601f19601f8301169050919050565b610d7481610c9e565b8114610d7f57600080fd5b50565b610d8b81610cdc565b8114610d9657600080fd5b5056fea26469706673582212208990cea9438f962eb5b7cab585a0763f886598dbe5547c60a347ca8f375996de64736f6c63430008060033";

export class FixedSupplyToken__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FixedSupplyToken> {
    return super.deploy(overrides || {}) as Promise<FixedSupplyToken>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FixedSupplyToken {
    return super.attach(address) as FixedSupplyToken;
  }
  connect(signer: Signer): FixedSupplyToken__factory {
    return super.connect(signer) as FixedSupplyToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FixedSupplyTokenInterface {
    return new utils.Interface(_abi) as FixedSupplyTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FixedSupplyToken {
    return new Contract(address, _abi, signerOrProvider) as FixedSupplyToken;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PayspecInterface extends ethers.utils.Interface {
  functions: {
    "cancelInvoice(string,uint256,address,uint256,address,address[],uint256[],uint256,bytes32)": FunctionFragment;
    "cancelledInvoiceUUIDs(bytes32)": FunctionFragment;
    "contractVersion()": FunctionFragment;
    "createAndPayInvoice(string,uint256,address,uint256,address,address[],uint256[],uint256,bytes32)": FunctionFragment;
    "getInvoiceAmountPaid(bytes32)": FunctionFragment;
    "getInvoiceDescription(bytes32)": FunctionFragment;
    "getInvoiceEthBlockPaidAt(bytes32)": FunctionFragment;
    "getInvoicePayer(bytes32)": FunctionFragment;
    "getInvoiceTokenCurrency(bytes32)": FunctionFragment;
    "getInvoiceUUID(string,uint256,address,uint256,address,address[],uint256[],uint256)": FunctionFragment;
    "invoiceExpiresAt(bytes32)": FunctionFragment;
    "invoiceHasExpired(bytes32)": FunctionFragment;
    "invoiceWasCancelled(bytes32)": FunctionFragment;
    "invoiceWasCreated(bytes32)": FunctionFragment;
    "invoiceWasDisabled(bytes32)": FunctionFragment;
    "invoiceWasPaid(bytes32)": FunctionFragment;
    "invoices(bytes32)": FunctionFragment;
    "lockContract()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelInvoice",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      string,
      string[],
      BigNumberish[],
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelledInvoiceUUIDs",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contractVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAndPayInvoice",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      string,
      string[],
      BigNumberish[],
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvoiceAmountPaid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvoiceDescription",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvoiceEthBlockPaidAt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvoicePayer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvoiceTokenCurrency",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvoiceUUID",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      string,
      string[],
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "invoiceExpiresAt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "invoiceHasExpired",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "invoiceWasCancelled",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "invoiceWasCreated",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "invoiceWasDisabled",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "invoiceWasPaid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "invoices", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "lockContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelInvoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelledInvoiceUUIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAndPayInvoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvoiceAmountPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvoiceDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvoiceEthBlockPaidAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvoicePayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvoiceTokenCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvoiceUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invoiceExpiresAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invoiceHasExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invoiceWasCancelled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invoiceWasCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invoiceWasDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invoiceWasPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invoices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CancelledInvoice(bytes32)": EventFragment;
    "CreatedInvoice(bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PaidInvoice(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelledInvoice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatedInvoice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaidInvoice"): EventFragment;
}

export type CancelledInvoiceEvent = TypedEvent<[string] & { uuid: string }>;

export type CreatedInvoiceEvent = TypedEvent<[string] & { uuid: string }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PaidInvoiceEvent = TypedEvent<
  [string, string] & { uuid: string; from: string }
>;

export class Payspec extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PayspecInterface;

  functions: {
    cancelInvoice(
      description: string,
      nonce: BigNumberish,
      token: string,
      amountDue: BigNumberish,
      payTo: string,
      feeAddresses: string[],
      feePercents: BigNumberish[],
      ethBlockExpiresAt: BigNumberish,
      expecteduuid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelledInvoiceUUIDs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    contractVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    createAndPayInvoice(
      description: string,
      nonce: BigNumberish,
      token: string,
      amountDue: BigNumberish,
      payTo: string,
      feeAddresses: string[],
      feePercents: BigNumberish[],
      ethBlockExpiresAt: BigNumberish,
      expecteduuid: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInvoiceAmountPaid(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInvoiceDescription(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getInvoiceEthBlockPaidAt(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInvoicePayer(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getInvoiceTokenCurrency(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getInvoiceUUID(
      description: string,
      nonce: BigNumberish,
      token: string,
      amountDue: BigNumberish,
      payTo: string,
      feeAddresses: string[],
      feePercents: BigNumberish[],
      expiresAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { uuid: string }>;

    invoiceExpiresAt(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    invoiceHasExpired(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    invoiceWasCancelled(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    invoiceWasCreated(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    invoiceWasDisabled(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    invoiceWasPaid(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    invoices(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        boolean,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        uuid: string;
        description: string;
        nonce: BigNumber;
        created: boolean;
        token: string;
        amountDue: BigNumber;
        payTo: string;
        paidBy: string;
        amountPaid: BigNumber;
        ethBlockPaidAt: BigNumber;
        ethBlockExpiresAt: BigNumber;
      }
    >;

    lockContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelInvoice(
    description: string,
    nonce: BigNumberish,
    token: string,
    amountDue: BigNumberish,
    payTo: string,
    feeAddresses: string[],
    feePercents: BigNumberish[],
    ethBlockExpiresAt: BigNumberish,
    expecteduuid: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelledInvoiceUUIDs(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  contractVersion(overrides?: CallOverrides): Promise<BigNumber>;

  createAndPayInvoice(
    description: string,
    nonce: BigNumberish,
    token: string,
    amountDue: BigNumberish,
    payTo: string,
    feeAddresses: string[],
    feePercents: BigNumberish[],
    ethBlockExpiresAt: BigNumberish,
    expecteduuid: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInvoiceAmountPaid(
    invoiceUUID: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInvoiceDescription(
    invoiceUUID: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getInvoiceEthBlockPaidAt(
    invoiceUUID: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInvoicePayer(
    invoiceUUID: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getInvoiceTokenCurrency(
    invoiceUUID: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getInvoiceUUID(
    description: string,
    nonce: BigNumberish,
    token: string,
    amountDue: BigNumberish,
    payTo: string,
    feeAddresses: string[],
    feePercents: BigNumberish[],
    expiresAt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  invoiceExpiresAt(
    invoiceUUID: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  invoiceHasExpired(
    invoiceUUID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  invoiceWasCancelled(
    invoiceUUID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  invoiceWasCreated(
    invoiceUUID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  invoiceWasDisabled(
    invoiceUUID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  invoiceWasPaid(
    invoiceUUID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  invoices(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      boolean,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      uuid: string;
      description: string;
      nonce: BigNumber;
      created: boolean;
      token: string;
      amountDue: BigNumber;
      payTo: string;
      paidBy: string;
      amountPaid: BigNumber;
      ethBlockPaidAt: BigNumber;
      ethBlockExpiresAt: BigNumber;
    }
  >;

  lockContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelInvoice(
      description: string,
      nonce: BigNumberish,
      token: string,
      amountDue: BigNumberish,
      payTo: string,
      feeAddresses: string[],
      feePercents: BigNumberish[],
      ethBlockExpiresAt: BigNumberish,
      expecteduuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelledInvoiceUUIDs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contractVersion(overrides?: CallOverrides): Promise<BigNumber>;

    createAndPayInvoice(
      description: string,
      nonce: BigNumberish,
      token: string,
      amountDue: BigNumberish,
      payTo: string,
      feeAddresses: string[],
      feePercents: BigNumberish[],
      ethBlockExpiresAt: BigNumberish,
      expecteduuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getInvoiceAmountPaid(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvoiceDescription(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getInvoiceEthBlockPaidAt(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvoicePayer(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getInvoiceTokenCurrency(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getInvoiceUUID(
      description: string,
      nonce: BigNumberish,
      token: string,
      amountDue: BigNumberish,
      payTo: string,
      feeAddresses: string[],
      feePercents: BigNumberish[],
      expiresAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    invoiceExpiresAt(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invoiceHasExpired(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    invoiceWasCancelled(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    invoiceWasCreated(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    invoiceWasDisabled(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    invoiceWasPaid(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    invoices(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        boolean,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        uuid: string;
        description: string;
        nonce: BigNumber;
        created: boolean;
        token: string;
        amountDue: BigNumber;
        payTo: string;
        paidBy: string;
        amountPaid: BigNumber;
        ethBlockPaidAt: BigNumber;
        ethBlockExpiresAt: BigNumber;
      }
    >;

    lockContract(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CancelledInvoice(bytes32)"(
      uuid?: null
    ): TypedEventFilter<[string], { uuid: string }>;

    CancelledInvoice(uuid?: null): TypedEventFilter<[string], { uuid: string }>;

    "CreatedInvoice(bytes32)"(
      uuid?: null
    ): TypedEventFilter<[string], { uuid: string }>;

    CreatedInvoice(uuid?: null): TypedEventFilter<[string], { uuid: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PaidInvoice(bytes32,address)"(
      uuid?: null,
      from?: null
    ): TypedEventFilter<[string, string], { uuid: string; from: string }>;

    PaidInvoice(
      uuid?: null,
      from?: null
    ): TypedEventFilter<[string, string], { uuid: string; from: string }>;
  };

  estimateGas: {
    cancelInvoice(
      description: string,
      nonce: BigNumberish,
      token: string,
      amountDue: BigNumberish,
      payTo: string,
      feeAddresses: string[],
      feePercents: BigNumberish[],
      ethBlockExpiresAt: BigNumberish,
      expecteduuid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelledInvoiceUUIDs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractVersion(overrides?: CallOverrides): Promise<BigNumber>;

    createAndPayInvoice(
      description: string,
      nonce: BigNumberish,
      token: string,
      amountDue: BigNumberish,
      payTo: string,
      feeAddresses: string[],
      feePercents: BigNumberish[],
      ethBlockExpiresAt: BigNumberish,
      expecteduuid: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInvoiceAmountPaid(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvoiceDescription(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvoiceEthBlockPaidAt(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvoicePayer(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvoiceTokenCurrency(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInvoiceUUID(
      description: string,
      nonce: BigNumberish,
      token: string,
      amountDue: BigNumberish,
      payTo: string,
      feeAddresses: string[],
      feePercents: BigNumberish[],
      expiresAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invoiceExpiresAt(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invoiceHasExpired(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invoiceWasCancelled(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invoiceWasCreated(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invoiceWasDisabled(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invoiceWasPaid(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invoices(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    lockContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelInvoice(
      description: string,
      nonce: BigNumberish,
      token: string,
      amountDue: BigNumberish,
      payTo: string,
      feeAddresses: string[],
      feePercents: BigNumberish[],
      ethBlockExpiresAt: BigNumberish,
      expecteduuid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelledInvoiceUUIDs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createAndPayInvoice(
      description: string,
      nonce: BigNumberish,
      token: string,
      amountDue: BigNumberish,
      payTo: string,
      feeAddresses: string[],
      feePercents: BigNumberish[],
      ethBlockExpiresAt: BigNumberish,
      expecteduuid: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInvoiceAmountPaid(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvoiceDescription(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvoiceEthBlockPaidAt(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvoicePayer(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvoiceTokenCurrency(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInvoiceUUID(
      description: string,
      nonce: BigNumberish,
      token: string,
      amountDue: BigNumberish,
      payTo: string,
      feeAddresses: string[],
      feePercents: BigNumberish[],
      expiresAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invoiceExpiresAt(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invoiceHasExpired(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invoiceWasCancelled(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invoiceWasCreated(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invoiceWasDisabled(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invoiceWasPaid(
      invoiceUUID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invoices(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
